name: Auto name images & build images.json

on:
  push:                  # run on any push (any branch)
    branches: ['**']
  workflow_dispatch:     # allow manual runs

permissions:
  contents: write

jobs:
  go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # safer for pushing back

      - name: Debug â€” show branch and tree
        run: |
          echo "EVENT: $GITHUB_EVENT_NAME"
          echo "REF:   $GITHUB_REF"
          echo "BRANCH_NAME: ${{ github.ref_name }}"
          ls -la

      - name: Ensure assets/ exists & move root images in
        shell: bash
        run: |
          mkdir -p assets
          shopt -s nullglob nocaseglob
          for f in *.{png,jpg,jpeg,webp,avif}; do
            [ -f "$f" ] || continue
            echo "Move $f -> assets/"
            mv "$f" assets/
          done
          echo "Tree after move:"
          ls -la assets || true

      - name: Rename to OW_### and build images.json
        shell: bash
        run: |
          python3 - << 'PY'
import os, re, json, time

ASSETS = "assets"
KEEP = {"png","jpg","jpeg","webp","avif"}
ANY_OW = re.compile(r'^OW_(\d+)\.(png|jpg|jpeg|webp|avif)$', re.I)

os.makedirs(ASSETS, exist_ok=True)

# Collect all images in assets/
entries = []
for f in os.listdir(ASSETS):
    p = os.path.join(ASSETS, f)
    if os.path.isfile(p) and f.rsplit('.',1)[-1].lower() in KEEP:
        entries.append((f, os.stat(p).st_mtime))

# Determine used indices from any OW_# pattern
used = set()
for f, _ in entries:
    m = ANY_OW.match(f)
    if m: used.add(int(m.group(1)))
next_idx = max(used) if used else 0

# Canonize / rename to OW_###.ext
changes = []
for f, mtime in sorted(entries, key=lambda t: t[1]):  # oldest first
    m = ANY_OW.match(f)
    p = os.path.join(ASSETS, f)
    ext = f.rsplit('.',1)[-1].lower()
    if m:
        canon = f"OW_{int(m.group(1)):03d}.{ext}"
        if f != canon and not os.path.exists(os.path.join(ASSETS, canon)):
            os.rename(p, os.path.join(ASSETS, canon))
            changes.append((f, canon))
    else:
        next_idx += 1
        canon = f"OW_{next_idx:03d}.{ext}"
        os.rename(p, os.path.join(ASSETS, canon))
        changes.append((f, canon))

# Build images.json sorted by numeric index
final = []
for f in os.listdir(ASSETS):
    m = ANY_OW.match(f)
    if m:
        final.append((int(m.group(1)), f))
final.sort(key=lambda t: t[0])

with open("images.json","w",encoding="utf-8") as fh:
    json.dump([f"assets/{name}" for _, name in final], fh, indent=2, ensure_ascii=False)

print("Renamed/Canonized:", changes)
print("Total images:", len(final))
PY
          echo "images.json:"
          cat images.json

      - name: Commit & push (explicit target branch)
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add assets images.json
          git commit -m "Auto-move, canonize names, and update images.json" || echo "No changes"
          # push explicitly to the branch that triggered the run
          git push origin HEAD:${{ github.ref_name }}
